{
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": "顯示隱含物件建立的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": "顯示有推斷類型之變數的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForIndexerParameters": "顯示索引子的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": "顯示 Lambda 參數類型的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForTypes": "顯示內嵌類型提示",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "執行背景程式碼分析: (先前為 `omnisharp.enableRoslynAnalyzers`)",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.fullSolution": "整個解決方案",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.none": "無",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.openFiles": "開啟的文件",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope": "顯示編譯器錯誤和警告:",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.fullSolution": "整個解決方案",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.none": "無",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.openFiles": "開啟的文件",
  "configuration.dotnet.codeLens.enableReferencesCodeLens": "指定是否應該顯示參考 CodeLens。(先前為 `csharp.referencesCodeLens.enabled`)",
  "configuration.dotnet.codeLens.enableTestsCodeLens": "指定是否應顯示執行和偵錯測試 CodeLens。(先前為 `csharp.testsCodeLens.enabled`)",
  "configuration.dotnet.completion.provideRegexCompletions": "在完成清單中顯示規則運算式。",
  "configuration.dotnet.completion.showCompletionItemsFromUnimportedNamespaces": "啟用在完成清單中顯示未匯入的類型和未匯入的擴充方法的支援。認可時，適當的 using 指示詞會新增到目前檔案的頂端。(先前為 `omnisharp.enableImportCompletion`)",
  "configuration.dotnet.completion.showNameCompletionSuggestions": "為您最近選取的成員執行自動物件名稱完成。",
  "configuration.dotnet.defaultSolution.description": "要在工作區中開啟的預設解決方案路徑，或設為 [停用] 以略過它。(先前為 `omnisharp.defaultLaunchSolution`)",
  "configuration.dotnet.dotnetPath": "指定要使用的 dotnet 安裝目錄路徑，而非系統預設的路徑。這只會影響用來裝載語言伺服器本身的 dotnet 安裝。範例: \"/home/username/mycustomdotnetdirectory”。",
  "configuration.dotnet.highlighting.highlightRelatedJsonComponents": "反白資料指標下的相關 JSON 元件。",
  "configuration.dotnet.highlighting.highlightRelatedRegexComponents": "反白資料指標下的相關規則運算式元件。",
  "configuration.dotnet.implementType.insertionBehavior": "實作介面或抽象類別時，屬性、事件和方法的插入位置。",
  "configuration.dotnet.implementType.insertionBehavior.atTheEnd": "將它們放置在結尾。",
  "configuration.dotnet.implementType.insertionBehavior.withOtherMembersOfTheSameKind": "將它們與其他相同種類的成員放在一起。",
  "configuration.dotnet.implementType.propertyGenerationBehavior": "實作介面或抽象類別時屬性的產生行為。",
  "configuration.dotnet.implementType.propertyGenerationBehavior.preferAutoProperties": "建議使用自動屬性。",
  "configuration.dotnet.implementType.propertyGenerationBehavior.preferThrowingProperties": "建議使用擲回屬性。",
  "configuration.dotnet.inlayHints.enableInlayHintsForLiteralParameters": "顯示常值的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": "顯示 'new' 運算式的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForOtherParameters": "顯示所有其他項目的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForParameters": "顯示內嵌參數名稱提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": "當參數名稱只有尾碼不同時，不出現提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": "當引數符合參數名稱時抑制提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": "當參數名稱符合方法的意圖時，不出現提示",
  "configuration.dotnet.navigation.navigateToDecompiledSources": "啟用到反向組譯來源的瀏覽。",
  "configuration.dotnet.quickInfo.showRemarksInQuickInfo": "顯示符號時顯示備註資訊。",
  "configuration.dotnet.server.extensionPaths": "覆寫語言伺服器 --extension 引數的路徑",
  "configuration.dotnet.server.path": "指定伺服器 (LSP 或 O#) 可執行檔的絕對路徑。保留空白時，會使用釘選到 C# 延伸模組的版本。(先前為 `omnisharp.path`)",
  "configuration.dotnet.server.trace": "設定語言伺服器的記錄層次",
  "configuration.dotnet.server.waitForDebugger": "啟動伺服器時傳遞 --debug 旗標，以允許附加偵錯工具。(先前為 `omnisharp.waitForDebugger`)",
  "configuration.dotnet.symbolSearch.searchReferenceAssemblies": "在參考組件中搜尋符號。這會影響需要符號搜尋的功能，例如新增匯入。",
  "configuration.dotnet.unitTestDebuggingOptions": "啟動單元測試偵錯時搭配偵錯工具使用的選項。(先前為 `csharp.unitTestDebuggingOptions`)",
  "configuration.razor.languageServer.debug": "指定啟動語言伺服器時，是否要等候偵錯附加。",
  "configuration.razor.languageServer.directory": "覆寫 Razor 語言伺服器目錄的路徑。",
  "configuration.razor.trace": "指定是否要輸出所有訊息 [Verbose]，部分訊息 [Messages] 或完全不 [Off]。",
  "configuration.razor.trace.messages": "只記錄來自 Razor 延伸模組的部分訊息",
  "configuration.razor.trace.off": "不記錄來自 Razor 延伸模組的訊息",
  "configuration.razor.trace.verbose": "記錄來自 Razor 延伸模組的所有訊息",
  "debuggers.dotnet.launch.launchConfigurationId.description": "要使用的啟動設定識別碼。空字串會使用目前的作用中設定。",
  "debuggers.dotnet.launch.projectPath.description": ".csproj 檔案的路徑。",
  "generateOptionsSchema.allowFastEvaluate.description": "當 true (預設狀態) 時，偵錯工具會模擬簡單屬性和方法的執行，以嘗試更快評估。",
  "generateOptionsSchema.args.0.description": "傳遞至程式的命令列引數。",
  "generateOptionsSchema.args.1.description": "傳遞至程式的命令列引數字串版本。",
  "generateOptionsSchema.checkForDevCert.description": "如果您要在 Windows 或 macOS 上啟動 Web 專案，且已啟用此功能，偵錯工具會檢查電腦是否具有用來開發在 HTTPs 端點上執行之 Web 服務器的自我簽署 HTTPS 憑證。如果未指定，則在設定 'serverReadyAction' 時預設為 true。此選項不會在 Linux、VS Code遠端及 web UI 案例 VS Code 上執行任何動作。如果找不到 HTTPS 憑證或該憑證不受信任，將會提示使用者安裝/信任該憑證。",
  "generateOptionsSchema.console.externalTerminal.enumDescription": "可透過使用者設定進行外部終端機的設定。",
  "generateOptionsSchema.console.integratedTerminal.enumDescription": "VS Code 的整合式終端機。",
  "generateOptionsSchema.console.internalConsole.enumDescription": "輸出到 VS Code 偵錯主控台。這不支援讀取主控台輸入 (例如: Console.ReadLine)。",
  "generateOptionsSchema.console.markdownDescription": "啟動主控台專案時，指出目的程式應該啟動到哪一個主控台。",
  "generateOptionsSchema.console.settingsDescription": "**注意:** _此選項僅適用於 'dotnet' 偵錯設定 type_。\r\n\r\n啟動主控台專案時，指出目的程式應該啟動到哪一個主控台。",
  "generateOptionsSchema.cwd.description": "正在偵錯之程式的工作目錄路徑。預設值是目前的工作區。",
  "generateOptionsSchema.enableStepFiltering.markdownDescription": "要啟用逐步執行屬性和運算子的旗標。此選項預設為 'true'。",
  "generateOptionsSchema.env.description": "傳遞給程式的環境變數。",
  "generateOptionsSchema.envFile.markdownDescription": "檔案傳遞給程式的環境變數。例如 '${workspaceFolder}/.env'",
  "generateOptionsSchema.externalConsole.markdownDescription": "屬性 'externalConsole' 已逾時，請改用 'console'。此選項預設為 'false'。",
  "generateOptionsSchema.justMyCode.markdownDescription": "啟用 (預設) 時，偵錯工具只會顯示使用者程式碼 (「我的程式碼」) 中的步驟，忽略系統程式碼及其他已最佳化或沒有偵錯符號的程式碼。[詳細資訊](https://aka.ms/VSCode-CS-LaunchJson#just-my-code)",
  "generateOptionsSchema.launchBrowser.args.description": "要傳遞至命令以開啟瀏覽器的引數。只有當平台特定元素 ('osx'、'linux' 或 'windows') 未指定 'args' 的值時，才會使用此功能。使用 ${auto-detect-url} 自動使用伺服器正在接聽的位址。",
  "generateOptionsSchema.launchBrowser.description": "描述啟動網頁瀏覽器的選項",
  "generateOptionsSchema.launchBrowser.enabled.description": "是否已啟用網頁瀏覽器啟動。此選項預設為 'true'。",
  "generateOptionsSchema.launchBrowser.linux.args.description": "要傳遞至命令以開啟瀏覽器的引數。使用 ${auto-detect-url} 自動使用伺服器正在接聽的位址。",
  "generateOptionsSchema.launchBrowser.linux.command.description": "將啟動網頁瀏覽器的可執行檔。",
  "generateOptionsSchema.launchBrowser.linux.description": "Linux 特定的 Web 啟動設定選項。根據預設，這會使用 'xdg-open' 啟動瀏覽器。",
  "generateOptionsSchema.launchBrowser.osx.args.description": "要傳遞至命令以開啟瀏覽器的引數。使用 ${auto-detect-url} 自動使用伺服器正在接聽的位址。",
  "generateOptionsSchema.launchBrowser.osx.command.description": "將啟動網頁瀏覽器的可執行檔。",
  "generateOptionsSchema.launchBrowser.osx.description": "OSX 特定的 Web 啟動設定選項。根據預設，這會使用 'open' 啟動瀏覽器。",
  "generateOptionsSchema.launchBrowser.windows.args.description": "要傳遞至命令以開啟瀏覽器的引數。使用 ${auto-detect-url} 自動使用伺服器正在接聽的位址。",
  "generateOptionsSchema.launchBrowser.windows.command.description": "將啟動網頁瀏覽器的可執行檔。",
  "generateOptionsSchema.launchBrowser.windows.description": "Windows 特定的 Web 啟動設定選項。根據預設，這會使用 'cmd /c start' 啟動瀏覽器。",
  "generateOptionsSchema.launchSettingsFilePath.markdownDescription": "launchSettings.json 檔案的路徑。如果未設定，偵錯工具會在 '{cwd}/Properties/launchSettings.json' 中搜尋。",
  "generateOptionsSchema.launchSettingsProfile.description": "若指定，表示要在 launchSettings.json 中使用的設定檔名稱。如果找不到 launchSettings.json，則會略過此問題。將會從指定的路徑讀取 launchSettings.json，該路徑應該是 'launchSettingsFilePath' 屬性，如果未設定，則會 {cwd}/Properties/launchSettings.json。如果設定為 Null 或空字串，則會忽略 launchSettings.json。如果未指定此值，則會使用第一個 'Project' 設定檔。",
  "generateOptionsSchema.logging.browserStdOut.markdownDescription": "旗標，以決定是否應將啟動網頁瀏覽器的 stdout 文字記錄到輸出視窗。此選項預設為 'true'。",
  "generateOptionsSchema.logging.description": "旗標，判斷應記錄到輸出視窗的訊息類型。",
  "generateOptionsSchema.logging.elapsedTiming.markdownDescription": "若為 true，引擎記錄將包含 'adapterElapsedTime' 和 'engineElapsedTime' 屬性，以表示要求所花費的時間，以微秒為單位。此選項預設為 'false'。",
  "generateOptionsSchema.logging.engineLogging.markdownDescription": "判斷是否應將診斷引擎記錄記錄到輸出視窗的旗標。此選項預設為 'false'。",
  "generateOptionsSchema.logging.exceptions.markdownDescription": "判斷是否應將例外狀況訊息記錄到輸出視窗的旗標。此選項預設為 'true'。",
  "generateOptionsSchema.logging.moduleLoad.markdownDescription": "判斷是否應將模組載入事件記錄到輸出視窗的旗標。此選項預設為 'true'。",
  "generateOptionsSchema.logging.processExit.markdownDescription": "控制是否在目標進程結束或偵錯停止時記錄訊息。此選項預設為 'true'。",
  "generateOptionsSchema.logging.programOutput.markdownDescription": "旗標，以決定是否在不使用外部主控台時，將程式輸出記錄到輸出視窗。此選項預設為 'true'。",
  "generateOptionsSchema.logging.threadExit.markdownDescription": "控制當目標處理常式中的執行緒結束時，是否要記錄訊息。此選項預設為 'false'。",
  "generateOptionsSchema.pipeTransport.debuggerPath.description": "目標機器的偵錯工具完整路徑。",
  "generateOptionsSchema.pipeTransport.description": "出現時，會指示偵錯工具使用另一個可執行檔來連線至遠端電腦，該管道會在 VS Code 與 .NET Core 偵錯工具後端可執行檔之間傳送標準輸入/輸出 (vsdbg)。",
  "generateOptionsSchema.pipeTransport.linux.description": "Linux 特定管道啟動設定選項",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description": "傳遞至管道程式的命令列引數。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description": "傳遞至管道程式的命令列引數字串版本。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.linux.pipeCwd.description": "管道程式工作目錄的完整路徑。",
  "generateOptionsSchema.pipeTransport.linux.pipeEnv.description": "傳遞至管道程式的環境變數。",
  "generateOptionsSchema.pipeTransport.linux.pipeProgram.description": "要執行的完整管道命令。",
  "generateOptionsSchema.pipeTransport.linux.quoteArgs.description": "包含必須加引號之字元 (範例: 必須引用空格) 的引數嗎? 預設為 'true'。如果設定為 false，將不再自動引用偵錯工具命令。",
  "generateOptionsSchema.pipeTransport.osx.description": "OSX 特定管道啟動設定選項",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description": "傳遞至管道程式的命令列引數。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description": "傳遞至管道程式的命令列引數字串版本。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.osx.pipeCwd.description": "管道程式工作目錄的完整路徑。",
  "generateOptionsSchema.pipeTransport.osx.pipeEnv.description": "傳遞至管道程式的環境變數。",
  "generateOptionsSchema.pipeTransport.osx.pipeProgram.description": "要執行的完整管道命令。",
  "generateOptionsSchema.pipeTransport.osx.quoteArgs.description": "包含必須加引號之字元 (範例: 必須引用空格) 的引數嗎? 預設為 'true'。如果設定為 false，將不再自動引用偵錯工具命令。",
  "generateOptionsSchema.pipeTransport.pipeArgs.0.description": "傳遞至管道程式的命令列引數。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.pipeArgs.1.description": "傳遞至管道程式的命令列引數字串版本。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.pipeCwd.description": "管道程式工作目錄的完整路徑。",
  "generateOptionsSchema.pipeTransport.pipeEnv.description": "傳遞至管道程式的環境變數。",
  "generateOptionsSchema.pipeTransport.pipeProgram.description": "要執行的完整管道命令。",
  "generateOptionsSchema.pipeTransport.quoteArgs.description": "包含必須加引號之字元 (範例: 必須引用空格) 的引數嗎? 預設為 'true'。如果設定為 false，將不再自動引用偵錯工具命令。",
  "generateOptionsSchema.pipeTransport.windows.description": "Windows 特定管道啟動設定選項",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description": "傳遞至管道程式的命令列引數。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description": "傳遞至管道程式的命令列引數字串版本。pipeArgs 中的權杖 ${debuggerCommand} 將會由完整偵錯工具命令取代，此權杖可與其他引數內嵌指定。如果 ${debuggerCommand} 未在任何引數中使用，則會將完整的偵錯工具命令新增至引數清單的結尾。",
  "generateOptionsSchema.pipeTransport.windows.pipeCwd.description": "管道程式工作目錄的完整路徑。",
  "generateOptionsSchema.pipeTransport.windows.pipeEnv.description": "傳遞至管道程式的環境變數。",
  "generateOptionsSchema.pipeTransport.windows.pipeProgram.description": "要執行的完整管道命令。",
  "generateOptionsSchema.pipeTransport.windows.quoteArgs.description": "包含必須加引號之字元 (範例: 必須引用空格) 的引數嗎? 預設為 'true'。如果設定為 false，將不再自動引用偵錯工具命令。",
  "generateOptionsSchema.processId.0.markdownDescription": "要附加的處理常式識別碼。使用 \"\" 取得要附加的執行中處理常式清單。如果使用 'processId'，則不應該使用 'processName'。",
  "generateOptionsSchema.processId.1.markdownDescription": "要附加的處理常式識別碼。使用 \"\" 取得要附加的執行中處理常式清單。如果使用 'processId'，則不應該使用 'processName'。",
  "generateOptionsSchema.processName.markdownDescription": "要附加的進程名稱。如果使用此項目，則不應該使用 'processId'。",
  "generateOptionsSchema.program.markdownDescription": "要啟動之應用程式 dll 或 .NET Core 主機可執行檔的路徑。\r\n此屬性通常採用下列格式: '${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)'\r\n\r\n範例: '${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll'\r\n\r\n位置:\r\n'(target-framework)' 是正在建立偵錯專案的架構。這通常會在專案檔中找到為 'TargetFramework' 屬性。\r\n\r\n'(project-name.dll)' 是偵錯專案組建輸出 dll 的名稱。這通常與專案檔案名相同，但副檔名 '.dll'。",
  "generateOptionsSchema.requireExactSource.markdownDescription": "旗標，要求目前的原始程式碼與 pdb 相符。此選項預設為 'true'。",
  "generateOptionsSchema.sourceFileMap.markdownDescription": "將組建時間路徑對應到本機來源位置。將以本機來源路徑取代所有建置時間路徑的執行個體。\r\n\r\n範例:\r\n\r\n'{\"<build-path>\":\"<local-source-path>\"}'",
  "generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription": "此 URL 的 Source Link 是否已啟用? 若未指定，此選項預設為 'true'。",
  "generateOptionsSchema.sourceLinkOptions.markdownDescription": "控制 Source Link 連線至網頁伺服器方式的選項。[詳細資訊](https://aka.ms/VSCode-CS-LaunchJson#source-link-options)",
  "generateOptionsSchema.stopAtEntry.markdownDescription": "若為 true，偵錯工具應在目標的進入點停止。此選項預設為 'false'。",
  "generateOptionsSchema.suppressJITOptimizations.markdownDescription": "如果為 true，則當在 Release 組態中編譯最佳化模組 (.dll) 在目標處理常式中載入時，偵錯工具會要求 Just-In-Time 編譯器產生已停用最佳化的程式碼。[詳細資訊](https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations)",
  "generateOptionsSchema.symbolOptions.cachePath.description": "應該快取從符號伺服器下載符號的目錄。若未指定，偵錯工具在 Windows 上的預設值為 %TEMP%\\SymbolCache，而在 Linux 和 macOS 上，偵錯工具將預設為 ~/.dotnet/symbolcache。",
  "generateOptionsSchema.symbolOptions.description": "控制如何找到並載入符號 (.pdb 檔案) 的選項。",
  "generateOptionsSchema.symbolOptions.moduleFilter.description": "提供選項，以控制偵錯工具會嘗試為其載入符號 (.pdb 檔案) 的模組 (.dll 檔案)。",
  "generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description": "偵錯工具不應為其載入符號的模組陣列。支援萬用字元 (範例: MyCompany.*.dll)。\r\n\r\n除非 '模式' 設定為 'loadAllButExcluded'，否則會忽略此屬性。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description": "若為 True，針對不在 'includedModules' 陣列中的任何模組，偵錯工具仍會檢查模組本身和啟動可執行檔的旁邊，但不會檢查符號搜尋清單上的路徑。此選項預設為 'true'。\r\n\r\n除非 '模式' 設定為 'loadOnlyIncluded'，否則會忽略此屬性。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description": "偵錯工具應該為其載入符號的模組陣列。支援萬用字元 (範例: MyCompany.*.dll)。\r\n\r\n除非 '模式' 設定為 'loadOnlyIncluded'，否則會忽略此屬性。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.description": "控制模組篩選作業在兩個基本作業模式中的哪一個。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription": "載入所有模組的符號，除非模組位於 'excludedModules' 陣列中。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription": "請勿嘗試載入任何模組的符號，除非其位於 'includedModules' 陣列中，或包含在 'includeSymbolsNextToModules' 設定中。",
  "generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description": "如果是 'true'，則會將 Microsoft 符號伺服器 (https\u200b://msdl.microsoft.com\u200b/download/symbols) 新增至符號搜尋路徑。若未指定，這個選項會預設為 'false'。",
  "generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description": "如果是 'true'，則會將 NuGet.org 符號伺服器 (https\u200b://symbols.nuget.org\u200b/download/symbols) 新增至符號搜尋路徑。若未指定，這個選項會預設為 'false'。",
  "generateOptionsSchema.symbolOptions.searchPaths.description": "符號陣列伺服器 URL (範例: http\u200b://MyExampleSymbolServer) 或目錄 (範例: /build/symbols) 搜尋 .pdb 檔案。除了預設位置 (位於模組旁和 pdb 原先放置的路徑)，也會搜尋這些目錄。",
  "generateOptionsSchema.targetArchitecture.markdownDescription": "[僅支援在局部 macOS 偵錯]\r\n\r\n偵錯程式的架構。除非設定此參數，否則會自動偵測到此情況。允許的值為 'x86_64' 或 'arm64'。",
  "generateOptionsSchema.targetOutputLogPath.description": "設定時，目標應用程式寫入 stdout 和 stderr 的文字 (例如: Console.WriteLine) 將會儲存到指定的檔案。如果主控台設定為 internalConsole 以外的項目，則會略過此選項。例如 '${workspaceFolder}/out.txt'",
  "viewsWelcome.debug.contents": "[為組建和偵錯產生 C# 資產](command:dotnet.generateAssets)\r\n\r\n若要深入了解 launch.json，請參閱[為 C# 偵錯設定 launch.json](https://aka.ms/VSCode-CS-LaunchJson)(英文)。"
}