{
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitObjectCreation": "显示创建隐式对象的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForImplicitVariableTypes": "显示具有推断类型的变量的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForIndexerParameters": "显示索引器的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForLambdaParameterTypes": "显示 lambda 参数类型的提示",
  "configuration.csharp.inlayHints.enableInlayHintsForTypes": "显示内联类型提示",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope": "运行以下项的后台代码分析: (之前为 \"omnisharp.enableRoslynAnalyzers\")",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.fullSolution": "整个解决方案",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.none": "无",
  "configuration.dotnet.backgroundAnalysis.analyzerDiagnosticsScope.openFiles": "打开的文档",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope": "显示以下的编译器错误和警告:",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.fullSolution": "整个解决方案",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.none": "无",
  "configuration.dotnet.backgroundAnalysis.compilerDiagnosticsScope.openFiles": "打开的文档",
  "configuration.dotnet.codeLens.enableReferencesCodeLens": "指定是否应显示引用 CodeLens。(之前为 \"csharp.referencesCodeLens.enabled\")",
  "configuration.dotnet.codeLens.enableTestsCodeLens": "指定是否应显示运行和调试测试 CodeLens。(之前为 \"csharp.testsCodeLens.enabled\")",
  "configuration.dotnet.completion.provideRegexCompletions": "在完成列表中显示正则表达式。",
  "configuration.dotnet.completion.showCompletionItemsFromUnimportedNamespaces": "支持在完成列表中显示未导入的类型和未导入的扩展方法。提交后，相应的 using 指令将添加到当前文件的顶部。(之前为 \"omnisharp.enableImportCompletion\")",
  "configuration.dotnet.completion.showNameCompletionSuggestions": "对最近选择的成员执行自动对象名称完成。",
  "configuration.dotnet.defaultSolution.description": "要在工作区中打开的默认解决方案的路径，或者设置为“禁用”以跳过它。(之前为 \"omnisharp.defaultLaunchSolution\")",
  "configuration.dotnet.dotnetPath": "指定要使用的 dotnet 安装目录的路径，而不是默认的系统目录。这仅影响用于承载语言服务器本身的 dotnet 安装。示例: \"/home/username/mycustomdotnetdirectory\"。",
  "configuration.dotnet.highlighting.highlightRelatedJsonComponents": "突出显示光标下的相关 JSON 组件。",
  "configuration.dotnet.highlighting.highlightRelatedRegexComponents": "突出显示光标下的相关正则表达式组件。",
  "configuration.dotnet.implementType.insertionBehavior": "实现接口或抽象类时属性、事件和方法的插入位置。",
  "configuration.dotnet.implementType.insertionBehavior.atTheEnd": "将它们放在末尾。",
  "configuration.dotnet.implementType.insertionBehavior.withOtherMembersOfTheSameKind": "将它们与相同类型的其他成员放置在一起。",
  "configuration.dotnet.implementType.propertyGenerationBehavior": "实现接口或抽象类时属性的生成行为。",
  "configuration.dotnet.implementType.propertyGenerationBehavior.preferAutoProperties": "首选自动属性。",
  "configuration.dotnet.implementType.propertyGenerationBehavior.preferThrowingProperties": "首选引发属性。",
  "configuration.dotnet.inlayHints.enableInlayHintsForLiteralParameters": "显示文本提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForObjectCreationParameters": "显示 \"new\" 表达式的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForOtherParameters": "显示其他所有内容的提示",
  "configuration.dotnet.inlayHints.enableInlayHintsForParameters": "显示内联参数名称提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatDifferOnlyBySuffix": "当参数名称只有后缀不同时禁止显示提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchArgumentName": "当参数与参数名称匹配时抑制提示",
  "configuration.dotnet.inlayHints.suppressInlayHintsForParametersThatMatchMethodIntent": "当参数名称与方法的意图匹配时禁止显示提示",
  "configuration.dotnet.navigation.navigateToDecompiledSources": "启用对分解源的导航。",
  "configuration.dotnet.quickInfo.showRemarksInQuickInfo": "显示符号时显示备注信息。",
  "configuration.dotnet.server.extensionPaths": "替代语言服务器 --extension 参数的路径",
  "configuration.dotnet.server.path": "指定服务器(LSP 或 O#)可执行文件的绝对路径。如果留空，会使用固定到 C# 扩展的版本。(之前为 \"omnisharp.path\")",
  "configuration.dotnet.server.trace": "设置语言服务器的日志记录级别",
  "configuration.dotnet.server.waitForDebugger": "启动服务器时传递 --debug 标志，以允许附加调试器。(之前为 \"omnisharp.waitForDebugger\")",
  "configuration.dotnet.symbolSearch.searchReferenceAssemblies": "在引用程序集中搜索符号。它会影响需要符号搜索的功能，例如添加导入。",
  "configuration.dotnet.unitTestDebuggingOptions": "启动单元测试调试时要与调试程序一起使用的选项。(之前为 \"csharp.unitTestDebuggingOptions\")",
  "configuration.razor.languageServer.debug": "指定在启动语言服务器时是否等待调试附加。",
  "configuration.razor.languageServer.directory": "重写 Razor 语言服务器目录的路径。",
  "configuration.razor.trace": "指定是否输出所有消息 [Verbose]、某些消息 [Messages] 或完全不输出 [Off]。",
  "configuration.razor.trace.messages": "仅记录来自 Razor 扩展的某些消息",
  "configuration.razor.trace.off": "不记录来自 Razor 扩展的消息",
  "configuration.razor.trace.verbose": "记录来自 Razor 扩展的所有消息",
  "debuggers.dotnet.launch.launchConfigurationId.description": "要使用的启动配置 ID。空字符串将使用当前的活动配置。",
  "debuggers.dotnet.launch.projectPath.description": ".csproj 文件的路径。",
  "generateOptionsSchema.allowFastEvaluate.description": "如果为 true (默认状态)，调试器将尝试模拟简单属性和方法的执行以加快评估速度。",
  "generateOptionsSchema.args.0.description": "传递给程序的命令行参数。",
  "generateOptionsSchema.args.1.description": "传递给程序的命令行参数的字符串化版本。",
  "generateOptionsSchema.checkForDevCert.description": "如果要在 Windows 或 macOS 上启动 Web 项目并启用此功能，当计算机具有用于开发在 https 终结点上运行的 Web 服务器的自签名 HTTPS 证书时，调试器将检查。如果未指定，在设置 \"serverReadyAction\" 时默认为 true。此选项在 Linux、VS Code 远程和 VS Code Web UI 方案中不起作用。如果找不到 HTTPS 证书或该证书不受信任，将提示用户安装/信任它。",
  "generateOptionsSchema.console.externalTerminal.enumDescription": "可通过用户设置来配置的外部终端。",
  "generateOptionsSchema.console.integratedTerminal.enumDescription": "VS Code 的集成终端。",
  "generateOptionsSchema.console.internalConsole.enumDescription": "输出到 VS Code 调试控制台。这不支持读取控制台输入(例如: Console.ReadLine)。",
  "generateOptionsSchema.console.markdownDescription": "启动控制台项目时，指示应将目标程序启动到哪个控制台。",
  "generateOptionsSchema.console.settingsDescription": "**注意:** _此选项仅用于 \"dotnet\" 调试配置类型_。\r\n\r\n启动控制台项目时，指示应将目标程序启动到哪个控制台。",
  "generateOptionsSchema.cwd.description": "正在调试的程序的工作目录的路径。默认值是当前工作区。",
  "generateOptionsSchema.enableStepFiltering.markdownDescription": "用于启用逐过程执行属性和运算符的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.env.description": "传递给程序的环境变量。",
  "generateOptionsSchema.envFile.markdownDescription": "文件传递给程序的环境变量。例如 \"${workspaceFolder}/.env\"",
  "generateOptionsSchema.externalConsole.markdownDescription": "特性 \"externalConsole\" 已弃用，请改用 \"console\"。此选项默认为 \"false\"。",
  "generateOptionsSchema.justMyCode.markdownDescription": "启用(默认)后，调试器仅显示并单步执行用户代码(“我的代码”)，忽略系统代码和其他经过优化或没有调试符号的代码。[详细信息](https://aka.ms/VSCode-CS-LaunchJson#just-my-code)",
  "generateOptionsSchema.launchBrowser.args.description": "要传递给命令以打开浏览器的参数。只有当平台特定的元素 (\"osx\"、\"linux\" 或 \"windows\") 没有为 \"args\" 指定值时，才使用此选项。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.description": "描述在启动过程中启动 Web 浏览器的选项",
  "generateOptionsSchema.launchBrowser.enabled.description": "是否已启用 Web 浏览器启动。此选项默认为 \"true\"。",
  "generateOptionsSchema.launchBrowser.linux.args.description": "要传递给命令以打开浏览器的参数。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.linux.command.description": "将启动 Web 浏览器的可执行文件。",
  "generateOptionsSchema.launchBrowser.linux.description": "特定于 Linux 的 Web 启动配置选项。默认情况下，这将使用 \"xdg-open\" 启动浏览器。",
  "generateOptionsSchema.launchBrowser.osx.args.description": "要传递给命令以打开浏览器的参数。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.osx.command.description": "将启动 Web 浏览器的可执行文件。",
  "generateOptionsSchema.launchBrowser.osx.description": "特定于 OSX 的 Web 启动配置选项。默认情况下，这将使用 \"open\" 启动浏览器。",
  "generateOptionsSchema.launchBrowser.windows.args.description": "要传递给命令以打开浏览器的参数。使用 ${auto-detect-url} 以自动使用服务器正在侦听的地址。",
  "generateOptionsSchema.launchBrowser.windows.command.description": "将启动 Web 浏览器的可执行文件。",
  "generateOptionsSchema.launchBrowser.windows.description": "特定于 Windows 的 Web 启动配置选项。默认情况下，这将使用 \"cmd /c start\" 启动浏览器。",
  "generateOptionsSchema.launchSettingsFilePath.markdownDescription": "launchSettings.json 文件的路径。如果未设置此项，调试器将在 \"{cwd}/Properties/launchSettings.json\" 中搜索。",
  "generateOptionsSchema.launchSettingsProfile.description": "如果指定，则指示要使用的 launchSettings.json 中配置文件的名称。如果找不到 launchSettings.json，则忽略此项。将从指定的路径中读取 launchSettings.json，该路径应为 \"launchSettingsFilePath\" 属性或 {cwd}/Properties/launchSettings.json (如果未设置)。如果此项设置为 null 或空字符串，则忽略 launchSettings.json。如果未指定此值，将使用第一个“项目”配置文件。",
  "generateOptionsSchema.logging.browserStdOut.markdownDescription": "用于确定是否应将启动 Web 浏览器中的 stdout 文本记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.description": "用于确定应将哪些类型的消息记录到输出窗口的标志。",
  "generateOptionsSchema.logging.elapsedTiming.markdownDescription": "如果为 true，引擎日志记录将包括 \"adapterElapsedTime\" 和 \"engineElapsedTime\" 属性，以指示请求花费的时间(以微秒为单位)。此选项默认为 \"false\"。",
  "generateOptionsSchema.logging.engineLogging.markdownDescription": "用于确定是否应将诊断引擎日志记录到输出窗口的标志。此选项默认为 \"false\"。",
  "generateOptionsSchema.logging.exceptions.markdownDescription": "用于确定是否应将异常消息记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.moduleLoad.markdownDescription": "用于确定是否应将模块加载事件记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.processExit.markdownDescription": "控制在目标进程退出或调试停止时是否记录消息。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.programOutput.markdownDescription": "用于确定在不使用外部控制台时是否应将程序输出记录到输出窗口的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.logging.threadExit.markdownDescription": "控制在目标进程中的线程退出时是否记录消息。此选项默认为 \"false\"。",
  "generateOptionsSchema.pipeTransport.debuggerPath.description": "目标计算机上调试程序的完整路径。",
  "generateOptionsSchema.pipeTransport.description": "如果存在，这会指示调试程序使用其他可执行文件作为管道来连接到远程计算机，此管道将在 VS Code 和 .NET Core 调试程序后端可执行文件 (vsdbg) 之间中继标准输入/输入。",
  "generateOptionsSchema.pipeTransport.linux.description": "特定于 Linux 的管道启动配置选项",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.linux.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.linux.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.linux.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.linux.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.linux.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.pipeTransport.osx.description": "特定于 OSX 的管道启动配置选项",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.osx.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.osx.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.osx.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.osx.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.osx.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.pipeTransport.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.pipeTransport.windows.description": "特定于 Windows 的管道启动配置选项",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.0.description": "传递给管道程序的命令行参数。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.windows.pipeArgs.1.description": "传递给管道程序的命令行参数的字符串化版本。pipeArgs 中的令牌 ${debuggerCommand} 将替换为完整的调试程序命令，此令牌可以与其他参数内联指定。如果 ${debuggerCommand} 未用于任何参数，会改为将完整的调试器命令添加到参数列表的末尾。",
  "generateOptionsSchema.pipeTransport.windows.pipeCwd.description": "管道程序工作目录的完全限定的路径。",
  "generateOptionsSchema.pipeTransport.windows.pipeEnv.description": "传递给程序的环境变量。",
  "generateOptionsSchema.pipeTransport.windows.pipeProgram.description": "要执行的完全限定的管道命令。",
  "generateOptionsSchema.pipeTransport.windows.quoteArgs.description": "是否应引用包含需要引用的字符的参数(示例: 空格)? 默认为 \"true\"。如果设置为 false，将不再自动引用调试器命令。",
  "generateOptionsSchema.processId.0.markdownDescription": "要附加到的进程 ID。使用 \"\" 获取要附加到的正在运行进程的列表。如果使用了 \"processId\"，不应使用 \"processName\"。",
  "generateOptionsSchema.processId.1.markdownDescription": "要附加到的进程 ID。使用 \"\" 获取要附加到的正在运行进程的列表。如果使用了 \"processId\"，不应使用 \"processName\"。",
  "generateOptionsSchema.processName.markdownDescription": "要附加到的进程名称。如果使用此项，不应使用 \"processId\"。",
  "generateOptionsSchema.program.markdownDescription": "要启动的应用程序 dll 或 .NET Core 主机可执行文件的路径。\r\n此属性通常采用以下格式: \"${workspaceFolder}/bin/Debug/(target-framework)/(project-name.dll)\"\r\n\r\n示例: \"${workspaceFolder}/bin/Debug/netcoreapp1.1/MyProject.dll\"\r\n\r\n位置:\r\n\"(target-framework)\" 是要为其生成调试项目的框架。这通常在项目文件中作为 \"TargetFramework\" 属性找到。\r\n\r\n\"(project-name.dll)\" 是调试项目的生成输出 dll 的名称。这通常与项目文件名相同，但具有 \".dll\" 扩展名。",
  "generateOptionsSchema.requireExactSource.markdownDescription": "要求当前源代码与 pdb 匹配的标志。此选项默认为 \"true\"。",
  "generateOptionsSchema.sourceFileMap.markdownDescription": "将生成时路径映射到本地源位置。生成时路径的所有实例都将替换为本地源路径。\r\n\r\n例子:\r\n\r\n\"{\"<build-path>\":\"<local-source-path>\"}\"",
  "generateOptionsSchema.sourceLinkOptions.additionalItems.enabled.markdownDescription": "是否为此 URL 启用了 Source Link? 如果未指定，此选项默认为 \"true\"。",
  "generateOptionsSchema.sourceLinkOptions.markdownDescription": "用于控制 Source Link 如何连接到 Web 服务器的选项。[详细信息](https://aka.ms/VSCode-CS-LaunchJson#source-link-options)",
  "generateOptionsSchema.stopAtEntry.markdownDescription": "如果为 true，调试器应在目标的入口点停止。此选项默认为 \"false\"。",
  "generateOptionsSchema.suppressJITOptimizations.markdownDescription": "如果为 true，则在目标进程中加载优化模块(发布配置中编译的 .dll)时，调试器将要求实时编译器生成禁用优化的代码。[详细信息](https://aka.ms/VSCode-CS-LaunchJson#suppress-jit-optimizations)",
  "generateOptionsSchema.symbolOptions.cachePath.description": "应缓存从符号服务器下载的符号的目录。如果未指定，则在 Windows 上，调试器将默认为 %TEMP%\\SymbolCache；在 Linux 和 macOS 上，调试器将默认为 ~/.dotnet/symbolcache。",
  "generateOptionsSchema.symbolOptions.description": "用于控制如何找到和加载符号(.pdb 文件)的选项。",
  "generateOptionsSchema.symbolOptions.moduleFilter.description": "提供选项来控制调试程序将尝试为哪些模块(.dll 文件)加载符号(.pdb 文件)。",
  "generateOptionsSchema.symbolOptions.moduleFilter.excludedModules.description": "调试程序不得为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\r\n\r\n会忽略此属性，除非“模式”设置为 \"loadAllButExcluded\"。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includeSymbolsNextToModules.description": "如果为 true，则对于未在 \"includedModules\" 数组中的任何模块，调试程序将在模块本身和启动可执行文件旁边进行检查，但它将不检查符号搜索列表上的路径。此选项默认为 \"true\"\r\n\r\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。",
  "generateOptionsSchema.symbolOptions.moduleFilter.includedModules.description": "调试程序应为其加载符号的模块数组。支持通配符(例如: MyCompany.*.dll)。\r\n\r\n会忽略此属性，除非“模式”设置为 \"loadOnlyIncluded\"。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.description": "控制模块筛选器在两种基本操作模式的下一种模式下操作。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadAllButExcluded.enumDescription": "为所有模块加载符号，除非模块在 \"excludedModules\" 数组中。",
  "generateOptionsSchema.symbolOptions.moduleFilter.mode.loadOnlyIncluded.enumDescription": "请勿尝试为任何模块加载符号，除非该模块在 \"includedModules\" 数组中，或者它通过 \"includeSymbolsNextToModules\" 设置包含在内。",
  "generateOptionsSchema.symbolOptions.searchMicrosoftSymbolServer.description": "如果为 \"true\"，则 Microsoft 符号服务器(https\u200b://msdl.microsoft.com\u200b/download/symbols)会添加到符号搜索路径。如果未指定，此选项会默认为 \"false\"。",
  "generateOptionsSchema.symbolOptions.searchNuGetOrgSymbolServer.description": "如果为 \"true\"，NuGet.org 符号服务器 (https\u200b://symbols.nuget.org\u200b/download/symbols) 会添加到符号搜索路径。如果未指定，此选项默认为 \"false\"。",
  "generateOptionsSchema.symbolOptions.searchPaths.description": "在其中搜索 .pdb 文件的符号服务器 URL (例如 http\u200b://MyExampleSymbolServer)或目录(例如 /build/symbols)的数组。除了默认位置，还将搜索这些目录 - 在模块以及 pdb 最初放置到的路径的旁边。",
  "generateOptionsSchema.targetArchitecture.markdownDescription": "[仅在本地 macOS 调试中受支持]\r\n\r\n调试对象的体系结构。除非设置了此参数，否则将自动检测到此参数。允许的值为 \"x86_64\" 或 \"arm64\"。",
  "generateOptionsSchema.targetOutputLogPath.description": "设置后，目标应用程序写入 stdout 和 stderr (例如 Console.WriteLine) 的文本将保存到指定的文件。如果控制台设置为 internalConsole 以外的其他内容，则忽略此选项。例如 \"${workspaceFolder}/out.txt\"",
  "viewsWelcome.debug.contents": "[为版本和调试生成 C# 资产](command:dotnet.generateAssets)\r\n\r\n若要了解有关 launch.json 的详细信息，请参阅 [为 C# 调试配置 launch.json](https://aka.ms/VSCode-CS-LaunchJson)。"
}